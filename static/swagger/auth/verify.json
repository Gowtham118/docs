{
    "post": {
        "operationId": "verifyMessage",
        "summary": "Verify message.",
        "description": "The `/auth/verify` endpoint verifies a signed Sign-In with Ethereum (`SIWE`) message along with the provided `nonce`, and, upon successful verification, issues a `JSON Web Token` (JWT) for authentication.",
        "security": [],
        "requestBody": {
            "required": true,
            "content": {
                "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {
                            "message": {
                                "type": "string",
                                "example": "localhost:4200 wants you to sign in with your Ethereum account: 0x8F4f2B8ab0341Af0cAe29e3C0F35C30eE00A3dE9\nDeFiHub\nURI: http://localhost:4200/\nVersion: 2\nChain ID: 3\nNonce: b8bc718d6af38a0d2cac5085c53f617a52e590b0ff4ad2c4abb0825e9cc39079\nIssued At: 2024-12-24T14:15:30.123Z",
                                "description": "The message to be verified."
                            },
                            "signature": {
                                "type": "string",
                                "example": "6fe3d5d62b9b0137b1747b2a9dbb227b09d547c1a10f0455efb2584b459f9b24",
                                "description": "The signed message to verify."
                            },
                            "nonce": {
                                "type": "string",
                                "example": "b8bc718d6af38a0d2cac5085c53f617a52e590b0ff4ad2c4abb0825e9cc39079",
                                "description": "The nonce generated previously for the user to sign."
                            }
                        },
                        "required": [
                            "message",
                            "signature",
                            "nonce"
                        ]
                    }
                }
            }
        },
        "responses": {
            "200": {
                "description": "JWT token successfully returned.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "type": "string",
                                    "example": "Ok",
                                    "description": "An enum representing the possible outcomes of the endpoint, indicating whether the request was successful.",
                                    "enum": ["Ok","Error"]
                                },
                                "result": {
                                    "type": "string",
                                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.CwQHc49-QhP9O-d78b6oAAGv1FlMY_MBOxxr06vNPSgTSOx40HpNqTTlLwFExC-U-KajJZ2izwSKVhNlD2DqTf-V2M-wQTZsG9Ucqg-QZ-V_L02ePyyJ8mn5vJUtTfxmf_WyytvjxIRkPqKkPmu3tJl00cRVt4kFiD_F_XRhPT8QNmEodf5Q9jcByq5J3eyVgfge4wZA9V5nYBz9N-i_AcDttXQmsxtzvthlwszi5Sscw4yIbw1lnz_fHxuK6-lpoIh8IbOdPfGMlg_Mc0AzVObrhMKbT0OnNfbtk9tI0vErzOnoD7A2vDdBz01XccFZ36txcxQ95JZ-_WNs7g",
                                    "description": "JWT token issued for authenticated user, containing encoded user claims and used for session validation in subsequent API requests."
                                }
                            }
                        }
                    }
                }
            },
            "400": {
                "description": "Bad request due to invalid parameters.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "type": "string",
                                    "example": "Error",
                                    "description": "An enum representing the possible outcomes of the endpoint, indicating whether the request was successful.",
                                    "enum": ["Ok","Error"]
                                },
                                "error": {
                                    "type": "string",
                                    "example": "Invalid message",
                                    "description": "Returns an error if the nonce, message, or signature is invalid, indicating verification failure."
                                }
                            }
                        }
                    }
                }
            },
            "500": {
                "description": "Internal Server Error. The server failed to process the request.",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "type": "string",
                                    "example": "Error",
                                    "description": "Enum representing the success of /nonce",
                                    "enum": ["Error"]
                                },
                                "error": {
                                    "type": "string",
                                    "description": "Error message explaining the server-side issue.",
                                    "example": "internal error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "tags": [
            "Auth"
        ]
    }
}
