{
  "openapi": "3.0.0",
  "info": {
    "title": "Garden API",
    "version": "1.0.0",
    "description": "This is a sample API for testing purposes.",
    "license": {
      "name": "Closed Source",
      "url": "https://evm-swapper-relay.onrender.com"
    }
  },
  "servers": [
    {
      "url": "https://evm-swapper-relay.onrender.com"
    },
    {
      "url": "https://evm-swapper-relay.onrender.com/orders"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "x-displayName": "Auth",
      "description": "All about the auth routes"
    },
    {
      "name": "relayer",
      "x-displayName": "Relayer",
      "description": "All about the relayer routes"
    },
    {
      "name": "orderbook",
      "x-displayName": "Orderbook",
      "description": "All about the orderbook routes"
    }
  ],
  "paths": {
    "/nonce": {
      "get": {
        "operationId": "getNonce",
        "summary": "Generate Nounce",
        "description": "Generates a nonce for the user to sign.",
        "responses": {
          "200": {
            "description": "The generated nonce.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Ok"
                    },
                    "data": {
                      "type": "string",
                      "example": "1234567890abcdef"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. The server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Failed to generate nonce"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ],
        "security": []
      }
    },
    "/verify": {
      "get": {
        "operationId": "verifyMessage",
        "summary": "Verify Message",
        "description": "Verifies the signed message and nonce, and returns a JWT token if valid.",
        "parameters": [
          {
            "name": "message",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "example": "Garden.fi"
            },
            "description": "The message to be verified."
          },
          {
            "name": "signature",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The signed message to verify."
          },
          {
            "name": "nonce",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The nonce used in the verification process."
          }
        ],
        "responses": {
          "200": {
            "description": "JWT token successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Ok"
                    },
                    "data": {
                      "type": "string",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.CwQHc49-QhP...qkfhC0"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Invalid signature or message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. The server failed to process the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "Error message explaining the server-side issue."
                    }
                  },
                  "example": {
                    "error": "Failed to verify message"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ],
        "security": []
      }
    },
    "/initiate": {
      "post": {
        "operationId": "initiateSwapWithSign",
        "summary": "Intiate swap",
        "description": "Initiates a swap with a signature.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "order_id": {
                    "type": "string",
                    "description": "The unique order ID"
                  },
                  "signature": {
                    "type": "string",
                    "description": "The signature for the swap"
                  },
                  "perform_on": {
                    "type": "string",
                    "enum": [
                      "Source",
                      "Destination"
                    ],
                    "description": "Indicates where the swap should be performed"
                  }
                },
                "required": [
                  "order_id",
                  "signature",
                  "perform_on"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Swap initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "Ok"
                      ]
                    },
                    "result": {
                      "type": "string",
                      "description": "Transaction hash"
                    }
                  },
                  "required": [
                    "status",
                    "result"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "Error"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "required": [
                    "status",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "Error"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "required": [
                    "status",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "relayer"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/redeem": {
      "post": {
        "operationId": "redeemSwap",
        "summary": "Redeem Swap",
        "description": "Redeems a swap using the secret.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "order_id": {
                    "type": "string",
                    "description": "The ID of the order to redeem"
                  },
                  "secret": {
                    "type": "string",
                    "description": "The secret for redeeming the swap"
                  },
                  "perform_on": {
                    "type": "string",
                    "enum": [
                      "Source",
                      "Destination"
                    ],
                    "description": "Whether the action is performed on the source or destination"
                  }
                },
                "required": [
                  "order_id",
                  "secret",
                  "perform_on"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Swap redeemed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "Ok"
                      ]
                    },
                    "result": {
                      "type": "string",
                      "description": "Transaction hash"
                    }
                  },
                  "required": [
                    "status",
                    "result"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "Error"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "required": [
                    "status",
                    "error"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "Error"
                      ]
                    },
                    "error": {
                      "type": "string",
                      "description": "Error message"
                    }
                  },
                  "required": [
                    "status",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "relayer"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/create-order": {
      "post": {
        "operationId": "createOrder",
        "summary": "Create Order",
        "description": "Creates a new order.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "source_chain": {
                    "type": "string"
                  },
                  "destination_chain": {
                    "type": "string"
                  },
                  "source_asset": {
                    "type": "string"
                  },
                  "destination_asset": {
                    "type": "string"
                  },
                  "initiator_source_address": {
                    "type": "string"
                  },
                  "initiator_destination_address": {
                    "type": "string"
                  },
                  "source_amount": {
                    "type": "string"
                  },
                  "destination_amount": {
                    "type": "string"
                  },
                  "fee": {
                    "type": "string"
                  },
                  "nonce": {
                    "type": "string"
                  },
                  "min_destination_confirmations": {
                    "type": "integer"
                  },
                  "timelock": {
                    "type": "integer"
                  },
                  "secret_hash": {
                    "type": "string"
                  },
                  "additional_data": {
                    "type": "object",
                    "properties": {
                      "strategy_id": {
                        "type": "string"
                      },
                      "input_token_price": {
                        "type": "number",
                        "format": "float"
                      },
                      "output_token_price": {
                        "type": "number",
                        "format": "float"
                      },
                      "deadline": {
                        "type": "string"
                      },
                      "bitcoin_optional_recipient": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "required": [
                  "source_chain",
                  "destination_chain",
                  "source_asset",
                  "destination_asset",
                  "initiator_source_address",
                  "initiator_destination_address",
                  "source_amount",
                  "destination_amount",
                  "fee",
                  "nonce",
                  "min_destination_confirmations",
                  "timelock",
                  "secret_hash",
                  "additional_data"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "Ok"
                      ]
                    },
                    "result": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "Error"
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "Error"
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "relayer"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/health": {
      "get": {
        "operationId": "checkHealth",
        "summary": "Check Health",
        "description": "Checks the health status of the API.",
        "security": [],
        "responses": {
          "200": {
            "description": "Server is working and online.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Online"
                }
              }
            }
          }
        },
        "tags": [
          "relayer"
        ]
      }
    },
    "/id/unmatched/{id}": {
      "get": {
        "operationId": "getUnmatchedOrderById",
        "summary": "Retrieve Unmatched Order by Id",
        "description": "Retrieve an unmatched order by its create ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The create ID of the unmatched order"
          }
        ],
        "responses": {
          "200": {
            "description": "Order retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "Ok"
                      ]
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "createId": {
                          "type": "string"
                        },
                        "orderDetails": {
                          "type": "object",
                          "properties": {
                            "product": {
                              "type": "string"
                            },
                            "quantity": {
                              "type": "integer"
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "status",
                    "result"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "Error"
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "error"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "orderbook"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/user/unmatched/{user}": {
      "get": {
        "operationId": "getUnmatchedOrdersByUser",
        "summary": "Get Unmatched orders by user",
        "description": "Retrieve all unmatched orders for a specific user.",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "description": "The user's address",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number for pagination",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved unmatched orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "Ok"
                      ]
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "Ok"
                          ]
                        },
                        "result": {
                          "type": "object",
                          "properties": {
                            "items": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "user": {
                                    "type": "string"
                                  },
                                  "order_details": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "pagination": {
                              "type": "object",
                              "properties": {
                                "page": {
                                  "type": "integer"
                                },
                                "per_page": {
                                  "type": "integer"
                                },
                                "total_items": {
                                  "type": "integer"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "Error"
                      ]
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "orderbook"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/matched": {
      "get": {
        "operationId": "getAllMatchedOrders",
        "summary": "Get All Matched Orders",
        "description": "Retrieve all matched orders with pagination.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "The paginated matched orders.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Ok"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "per_page": {
                          "type": "integer",
                          "example": 10
                        },
                        "total": {
                          "type": "integer",
                          "example": 100
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "12345"
                              },
                              "user": {
                                "type": "string",
                                "example": "0xAbC12345D67890Ef"
                              },
                              "createdAt": {
                                "type": "string",
                                "example": "2024-12-13T12:34:56Z"
                              },
                              "amount": {
                                "type": "number",
                                "example": 100.5
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid or missing parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Invalid pagination parameters"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "orderbook"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/unmatched": {
      "get": {
        "operationId": "getAllUnmatchedOrders",
        "summary": "Get All Unmatched Orders",
        "description": "Retrieve all unmatched orders with pagination.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of items per page"
          }
        ],
        "responses": {
          "200": {
            "description": "The paginated unmatched orders.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Ok"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "per_page": {
                          "type": "integer",
                          "example": 10
                        },
                        "total": {
                          "type": "integer",
                          "example": 100
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "12345"
                              },
                              "user": {
                                "type": "string",
                                "example": "0xAbC12345D67890Ef"
                              },
                              "createdAt": {
                                "type": "string",
                                "example": "2024-12-13T12:34:56Z"
                              },
                              "amount": {
                                "type": "number",
                                "example": 100.5
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid or missing parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Invalid pagination parameters"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "orderbook"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/id/matched/{id}": {
      "get": {
        "operationId": "getMatchedOrderById",
        "summary": "Get Matched Order by ID",
        "description": "Retrieve a matched order by its create ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The create ID of the matched order"
          }
        ],
        "responses": {
          "200": {
            "description": "The matched order.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Ok"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "12345"
                        },
                        "user": {
                          "type": "string",
                          "example": "0xAbC12345D67890Ef"
                        },
                        "matchedAt": {
                          "type": "string",
                          "example": "2024-12-13T12:34:56Z"
                        },
                        "amount": {
                          "type": "number",
                          "example": 100.5
                        },
                        "status": {
                          "type": "string",
                          "example": "Matched"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid or missing parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Invalid ID or missing parameters"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "orderbook"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/user/matched/{user}": {
      "get": {
        "operationId": "getMatchedOrdersByUser",
        "summary": "Get Matched Orders by User",
        "description": "Retrieve all matched orders for a specific user.",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The user's address"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "name": "pending",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "User pending actions"
          }
        ],
        "responses": {
          "200": {
            "description": "The paginated matched orders for the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Ok"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer",
                          "example": 1
                        },
                        "per_page": {
                          "type": "integer",
                          "example": 10
                        },
                        "total": {
                          "type": "integer",
                          "example": 50
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": "12345"
                              },
                              "user": {
                                "type": "string",
                                "example": "0xAbC12345D67890Ef"
                              },
                              "matchedAt": {
                                "type": "string",
                                "example": "2024-12-13T12:34:56Z"
                              },
                              "amount": {
                                "type": "number",
                                "example": 100.5
                              },
                              "status": {
                                "type": "string",
                                "example": "Matched"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid or missing parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Invalid user address or pagination parameters"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "orderbook"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/user/count/{user}": {
      "get": {
        "operationId": "getOrderCountByUser",
        "summary": "Get Order Count for User",
        "description": "Get the total number of orders for a specific user.",
        "parameters": [
          {
            "name": "user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The user's address"
          }
        ],
        "responses": {
          "200": {
            "description": "The total number of orders for the user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Ok"
                    },
                    "result": {
                      "type": "integer",
                      "example": 15
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Invalid or missing parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "Error"
                    },
                    "error": {
                      "type": "string",
                      "example": "Invalid user address"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "orderbook"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}